name: Qv2ray build matrix - Qt6

on: workflow_dispatch
jobs:
  build:
    strategy:
      matrix:
        ui_type: [QWidget]
        platform: [windows-2019] #  ubuntu-20.04, macos-10.15
        build_type: [Release]
        qt_version: [6.3.0]
        include:
          - platform: windows-2019
            qtarch: win64_msvc2019_64
      fail-fast: false

    runs-on: ${{ matrix.platform }}
    env:
      _QV2RAY_BUILD_INFO_: "Qv2ray built from Github Action"
      _QV2RAY_BUILD_EXTRA_INFO_: "qt${{ matrix.qt_version }}-${{ github.sha }}-ci.${{ matrix.platform }}"
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      - name: Checking out sources
        uses: actions/checkout@main
        with:
          submodules: "recursive"
      # --------------------------------------------------------
      - name: Install MSVC compiler
        if: matrix.platform == 'windows-2019'
        uses: ilammy/msvc-dev-cmd@master
        with:
          sdk: "10.0.22000.0"
          toolset: "14.29"
          arch: x64
      - name: Install Python
        uses: actions/setup-python@main
        with:
          python-version: "3.10.4"
          architecture: x64
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@main
        with:
          path: ../Qt
          key: QtCache-${{ matrix.platform }}-${{ matrix.qt_version }}
      - name: Installing Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          arch: ${{ matrix.qtarch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      # --------------------------------------------------------
      # - name: Linux - ${{ matrix.qt_version }} - Build preparation - Install Packages
      #   if: matrix.platform == 'ubuntu-20.04'
      #   run: |
      #     #sudo add-apt-repository ppa:webispy/grpc
      #     #sudo add-apt-repository ppa:carsten-uppenbrink-net/openssl
      #     sudo apt update
      #     sudo apt install -y libgl-dev libx11-dev libxkbcommon-x11-dev libxcb-image0-dev libxcb-icccm4-dev libssl-dev libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0
      #     sudo apt install -y libprotobuf-dev protobuf-compiler protobuf-c-compiler libgrpc++-dev protobuf-compiler-grpc ninja-build fcitx-frontend-qt5 libcurl4-openssl-dev
      # --------------------------------------------------------
      # - name: macOS - ${{ matrix.qt_version }} - Build preparation - Install Packages
      #   if: matrix.platform == 'macos-10.15'
      #   run: |
      #     brew install protobuf grpc ninja pkg-config openssl
      #     git clone https://github.com/Qv2ray/macdeployqt-patched
      #     cd macdeployqt-patched
      #     mkdir build; cd build;
      #     cmake .. -DCMAKE_BUILD_TYPE=Release; cmake --build .
      #     cp -v ./macdeployqt ${Qt6_DIR}/bin/macdeployqt
      # --------------------------------------------------------
      - name: Win - ${{ matrix.qt_version }} - Setup Ninja
        if: matrix.platform == 'windows-2019'
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.10.2
      - name: Win- - ${{ matrix.qt_version }} - Build preparation - Download Dependencies
        shell: bash
        if: matrix.platform == 'windows-2019'
        run: |
          cd ./libs
          ./setup-libs.sh windows x64
      # --------------------------------------------------------
      # - uses: actions/setup-node@v2
      #   if: matrix.platform == 'macos-10.15'
      #   with:
      #     node-version: "16.13.1"
      # - run: npm install -g appdmg
      #   if: matrix.platform == 'macos-10.15'
      # - name: macOS - ${{ matrix.qt_version }} - Generate Dependencies and Build
      #   shell: bash
      #   if: matrix.platform == 'macos-10.15'
      #   env:
      #     PKG_CONFIG_PATH: /usr/local/opt/openssl@1.1/lib/pkgconfig
      #   run: |
      #     mkdir build
      #     cd build
      #     cmake .. -GNinja \
      #       -DCMAKE_INSTALL_PREFIX=installed \
      #       -DQV2RAY_UI_TYPE=${{ matrix.ui_type }} \
      #       -DQV2RAY_QT6=ON \
      #       -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
      #       -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
      #       -DDS_STORE_SCRIPT=ON
      #     cmake --build . --parallel $(sysctl -n hw.logicalcpu)
      #     sudo cmake --install .
      #     appdmg ../assets/package_dmg.json ../Qv2ray.dmg
      # --------------------------------------------------------
      - name: Windows - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        if: matrix.platform == 'windows-2019'
        env:
          CC: cl.exe
          CXX: cl.exe
        run: |
          mkdir build
          cd build
          cmake .. -GNinja \
            -DQV2RAY_UI_TYPE=${{ matrix.ui_type }} \
            -DQV2RAY_QT6=ON \
            -DCMAKE_INSTALL_PREFIX=./deployment \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          cmake --build . --parallel $(nproc)
          cmake --install .
          rm ./deployment/vc_redist.x64.exe || true
        # cp ./*.pdb ./deployment || true
      # --------------------------------------------------------
      # - name: Linux - ${{ matrix.qt_version }} - Generate Dependencies and Build
      #   if: matrix.platform == 'ubuntu-20.04'
      #   shell: bash
      #   run: |
      #     mkdir build
      #     cd build
      #     cmake .. -GNinja \
      #       -DQV2RAY_UI_TYPE=${{ matrix.ui_type }} \
      #       -DQV2RAY_QT6=ON \
      #       -DCMAKE_INSTALL_PREFIX=./AppDir/usr \
      #       -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
      #       -DQV2RAY_TRANSLATION_PATH=QApplication::applicationDirPath\(\)+"/../share/qv2ray/lang"
      #     cmake --build . --parallel $(nproc)
      #     cmake --install .
      # --------------------------------------------------------
      # - name: Linux - ${{ matrix.qt_version }} - Generating AppImage
      #   if: matrix.platform == 'ubuntu-20.04'
      #   run: |
      #     cd build
      #     cd AppDir
      #     mkdir -p ./usr/{lib,optional}/
      #     mkdir -p ./usr/optional/libstdc++/
      #     mkdir -p ./usr/optional/libgcc_s/
      #     wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/AppRun-patched-x86_64 -O AppRun
      #     wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/exec-x86_64.so -O ./usr/optional/exec.so
      #     chmod a+x AppRun
      #     cp -fv /usr/lib/x86_64-linux-gnu/libstdc++.so.6 ./usr/optional/libstdc++/
      #     cp -fv /lib/x86_64-linux-gnu/libgcc_s.so.1 ./usr/optional/libgcc_s/
      #     cp -fv /usr/lib/x86_64-linux-gnu/{libssl.so.1.1,libcrypto.so.1.1} ./usr/lib/
      #     cd ..
      #     wget https://github.com/probonopd/linuxdeployqt/releases/download/6/linuxdeployqt-6-x86_64.AppImage
      #     chmod +x ./linuxdeployqt-6-x86_64.AppImage
      #     ./linuxdeployqt-6-x86_64.AppImage AppDir/usr/share/applications/qv2ray.desktop \
      #       -unsupported-allow-new-glibc \
      #       -appimage \
      #       -no-strip \
      #       -always-overwrite \
      #       -extra-plugins=iconengines,imageformats,platforminputcontexts
      #     mv ./Qv2ray*.AppImage ./Qv2ray.AppImage

      # - name: Linux - ${{ matrix.qt_version }} - Upload binaries to release
      #   uses: svenstaro/upload-release-action@v2
      #   if: matrix.platform == 'ubuntu-20.04'
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: build/Qv2ray.AppImage
      #     asset_name: Qv2ray.${{ steps.get_version.outputs.VERSION }}.Qt6.Linux.AppImage
      #     tag: ${{ github.ref }}
      #     overwrite: true
      # --------------------------------------------------------
      # - name: macOS - ${{ matrix.qt_version }} - Upload binaries to release
      #   if: matrix.platform == 'macos-10.15'
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: Qv2ray.dmg
      #     asset_name: Qv2ray.${{ steps.get_version.outputs.VERSION }}.Qt6.macOS.dmg
      #     tag: ${{ github.ref }}
      #     overwrite: true
      # --------------------------------------------------------
      - name: Win - ${{ matrix.qt_version }} - Create 7z Release
        if: matrix.platform == 'windows-2019'
        uses: DuckSoft/create-7z-action@master
        with:
          pathSource: ./build/deployment/
          pathTarget: ./release.7z

      - name: Win - ${{ matrix.qt_version }} - Upload binaries to release
        if: matrix.platform == 'windows-2019'
        uses: svenstaro/upload-release-action@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release.7z
          asset_name: Qv2ray.${{ steps.get_version.outputs.VERSION }}.Qt6.Windows.7z
          tag: ${{ github.ref }}
          overwrite: true
